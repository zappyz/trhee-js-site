import { Material } from 'three';
export type MaterialCloneInstructionsType = {
    materialNameOrg: string;
    materialProperties: {
        name: string;
        vertexColors: number;
        flatShading: boolean;
    };
};
/**
 * Static functions useful in the context of handling materials.
 */
export declare class MaterialUtils {
    /**
     * Adds the provided material to the provided map of materials if the material does not exists.
     * Use force override existing material.
     *
     * @param {Map<string, Material>} materialsObject
     * @param {string} materialName
     * @param {Material} material
     * @param {boolean} force Enforce addition of provided material
     * @param {boolean} [log] Log messages to the console
     */
    static addMaterial(materialsObject: Map<string, Material>, materialName: string, material: Material, force: boolean, log?: boolean): void;
    /**
     * Transforms the named materials object to an object with named jsonified materials.
     *
     * @param {Map<string, Material>}
     * @returns {Map<string, unknown>} Map of Materials in JSON representation
     */
    static getMaterialsJSON(materialsObject: Map<string, Material>): Map<string, unknown>;
    /**
     * Clones a material according the provided instructions.
     *
     * @param {Map<string, Material>} materials
     * @param {MaterialCloneInstructionsType} materialCloneInstruction
     * @param {boolean} [log]
     */
    static cloneMaterial(materials: Map<string, Material>, materialCloneInstruction: MaterialCloneInstructionsType, log?: boolean): Material | undefined;
}
//# sourceMappingURL=MaterialUtils.d.ts.map