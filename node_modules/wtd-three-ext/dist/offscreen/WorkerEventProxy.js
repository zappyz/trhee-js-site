/* eslint-disable @typescript-eslint/no-explicit-any */
import { EventDispatcher } from 'three';
export const noop = () => {
};
export class ElementProxyReceiver extends EventDispatcher {
    top = 0;
    left = 0;
    clientLeft = 0;
    clientTop = 0;
    pageXOffset = 0;
    pageYOffset = 0;
    style = {};
    ownerDocument = {
        documentElement: {}
    };
    offscreenCanvas = new OffscreenCanvas(100, 100);
    constructor() {
        super();
        this.ownerDocument.documentElement = this;
    }
    merge(offscreenCanvas) {
        this.offscreenCanvas = offscreenCanvas;
        this.width = offscreenCanvas.width;
        this.height = offscreenCanvas.height;
        this.oncontextlost = offscreenCanvas.oncontextlost;
        this.oncontextrestored = offscreenCanvas.oncontextrestored;
    }
    oncontextlost = null;
    oncontextrestored = null;
    getContext(contextId, options) {
        return this.offscreenCanvas.getContext(contextId, options) ?? null;
    }
    transferToImageBitmap() {
        return this.offscreenCanvas.transferToImageBitmap();
    }
    convertToBlob(options) {
        return this.offscreenCanvas.convertToBlob(options);
    }
    get height() {
        return this.offscreenCanvas.height;
    }
    set height(value) {
        this.offscreenCanvas.height = value;
    }
    get width() {
        return this.offscreenCanvas.width;
    }
    set width(value) {
        this.offscreenCanvas.width = value;
    }
    get clientWidth() {
        return this.width;
    }
    get clientHeight() {
        return this.height;
    }
    setPointerCapture(_id) {
        noop();
    }
    releasePointerCapture(_id) {
        noop();
    }
    getBoundingClientRect() {
        return {
            left: this.left,
            top: this.top,
            width: this.width,
            height: this.height,
            right: this.left + this.width,
            bottom: this.top + this.height,
        };
    }
    handleEvent(event) {
        event.preventDefault = noop;
        event.stopPropagation = noop;
        this.dispatchEvent(event);
    }
    focus() {
        noop();
    }
}
export const proxyStart = (proxy) => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    self.window = proxy;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    self.document = {
        addEventListener: proxy.addEventListener.bind(proxy),
        removeEventListener: proxy.removeEventListener.bind(proxy),
    };
};
//# sourceMappingURL=WorkerEventProxy.js.map