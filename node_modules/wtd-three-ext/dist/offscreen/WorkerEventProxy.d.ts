import { EventDispatcher } from 'three';
import { AssociatedArrayType } from 'wtd-core';
export declare const noop: () => void;
export declare class ElementProxyReceiver extends EventDispatcher {
    top: number;
    left: number;
    clientLeft: number;
    clientTop: number;
    pageXOffset: number;
    pageYOffset: number;
    style: {};
    ownerDocument: {
        documentElement: {};
    };
    offscreenCanvas: OffscreenCanvas;
    constructor();
    merge(offscreenCanvas: OffscreenCanvas): void;
    oncontextlost: ((this: OffscreenCanvas, ev: Event) => any) | null;
    oncontextrestored: ((this: OffscreenCanvas, ev: Event) => any) | null;
    getContext(contextId: any, options?: any): OffscreenCanvasRenderingContext2D | null;
    transferToImageBitmap(): ImageBitmap;
    convertToBlob(options?: ImageEncodeOptions): Promise<Blob>;
    get height(): number;
    set height(value: number);
    get width(): number;
    set width(value: number);
    get clientWidth(): number;
    get clientHeight(): number;
    setPointerCapture(_id: string): void;
    releasePointerCapture(_id: string): void;
    getBoundingClientRect(): {
        left: number;
        top: number;
        width: number;
        height: number;
        right: number;
        bottom: number;
    };
    handleEvent(event: AssociatedArrayType<unknown>): void;
    focus(): void;
}
export declare const proxyStart: (proxy: ElementProxyReceiver) => void;
//# sourceMappingURL=WorkerEventProxy.d.ts.map