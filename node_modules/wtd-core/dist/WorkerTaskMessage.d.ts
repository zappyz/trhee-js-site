import { Payload } from './Payload.js';
import { WorkerTaskCommandRequest, WorkerTaskCommandResponse } from './WorkerTaskWorker.js';
export type WorkerTaskMessageConfig = {
    cmd?: WorkerTaskCommands;
    name?: string;
    workerId?: number;
    progress?: number;
    payloads?: Payload[];
};
export type WorkerTaskCommands = WorkerTaskCommandRequest | WorkerTaskCommandResponse | string | 'unknown';
export declare class WorkerTaskMessage {
    cmd: WorkerTaskCommands;
    uuid: string;
    name: string;
    workerId: number;
    progress: number;
    payloads: Payload[];
    private constructor();
    addPayload(payloads?: Payload[] | Payload): void;
    static createNew(message: WorkerTaskMessageConfig): WorkerTaskMessage;
    static createEmpty(): WorkerTaskMessage;
    static createFromExisting(message: WorkerTaskMessage, options?: {
        overrideCmd?: WorkerTaskCommands;
        overrideUuid?: string;
    }): WorkerTaskMessage;
    static pack(payloads?: Payload[], cloneBuffers?: boolean): Transferable[];
    static unpack(rawMessage: WorkerTaskMessage, cloneBuffers?: boolean): WorkerTaskMessage;
    static fromPayload(payloads: Payload | Payload[], cmd?: WorkerTaskCommands): WorkerTaskMessage;
}
//# sourceMappingURL=WorkerTaskMessage.d.ts.map