import { WorkerTaskMessage } from './WorkerTaskMessage.js';
import type { WorkerConfig, WorkerConfigDirect, WorkerExecutionDef, WorkerMessageDef } from './WorkerTask.js';
type WorkerTaskDirectorConfig = {
    defaultMaxParallelExecutions?: number;
    verbose?: boolean;
};
export type WorkerTaskDirectorTaskDef = {
    taskName: string;
    workerConfig: WorkerConfig | WorkerConfigDirect;
    maxParallelExecutions?: number;
};
/**
 * Register one to many tasks type to the WorkerTaskDirector. Then init and enqueue a worker based execution by passing
 * configuration and buffers. The WorkerTaskDirector allows to execute a maximum number of executions in parallel for
 * each registered worker task.
 */
export declare class WorkerTaskDirector {
    static DEFAULT_MAX_PARALLEL_EXECUTIONS: number;
    private defaultMaxParallelExecutions;
    private verbose;
    private taskTypes;
    private workerExecutionPlans;
    constructor(config?: WorkerTaskDirectorConfig);
    /**
     * Registers functionality for a new task type based on workerRegistration info
     *
     * @param {string} taskName The name to be used for registration.
     * @param {WorkerConfig | WorkerConfigDirect} workerConfig information regarding the worker to be registered
     * @param {number} maxParallelExecutions Number of maximum parallel executions allowed
     * @return {boolean} Tells if registration is possible (new=true) or if task was already registered (existing=false)
     */
    registerTask(workerTaskDirectorDef: WorkerTaskDirectorTaskDef): boolean;
    /**
     * Provides initialization configuration and transferable objects.
     *
     * @param {string} taskTypeName The name of the registered task type.
     * @param {WorkerMessageDef} [def] Initialization instructions.
     */
    initTaskType(taskTypeName: string, def?: WorkerMessageDef): Promise<(void | WorkerTaskMessage)[]>;
    /**
     * Queues a new task of the given type. Task will not execute until initialization completes.
     *
     * @param {string} taskTypeName The name of the registered task type.
     * @param {WorkerExecutionDef} Defines all the information needed to execute the worker task.
     * @return {Promise}
     */
    enqueueForExecution(taskTypeName: string, workerExecutionDef: WorkerExecutionDef): Promise<WorkerTaskMessage>;
    private depleteWorkerExecutionPlans;
    private getUnusedWorkerTask;
    /**
     * Destroys all workers and associated resources.
     * @return {WorkerTaskDirector}
     */
    dispose(): this;
}
export {};
//# sourceMappingURL=WorkerTaskDirector.d.ts.map