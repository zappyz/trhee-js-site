import { PayloadRegister } from './Payload.js';
export class WorkerTaskMessage {
    cmd = 'unknown';
    uuid = 'unknown';
    name = 'unnamed';
    workerId = 0;
    progress = 0;
    payloads = [];
    constructor(config) {
        this.cmd = config?.cmd ?? this.cmd;
        this.name = config?.name ?? this.name;
        this.workerId = config?.workerId ?? this.workerId;
        this.progress = config?.progress ?? this.progress;
    }
    addPayload(payloads) {
        if (!payloads)
            return;
        if (Array.isArray(payloads)) {
            this.payloads = this.payloads.concat(payloads);
        }
        else {
            this.payloads.push(payloads);
        }
    }
    static createNew(message) {
        return new WorkerTaskMessage(message);
    }
    static createEmpty() {
        return WorkerTaskMessage.createNew({});
    }
    static createFromExisting(message, options) {
        const wtm = WorkerTaskMessage.createNew(message);
        wtm.uuid = message.uuid;
        if (options?.overrideCmd) {
            wtm.cmd = options.overrideCmd;
        }
        if (options?.overrideUuid) {
            wtm.uuid = options.overrideUuid;
        }
        return wtm;
    }
    static pack(payloads, cloneBuffers) {
        const transferables = [];
        if (payloads) {
            for (const payload of payloads) {
                const handler = PayloadRegister.handler.get(payload.$type);
                handler?.pack(payload, transferables, cloneBuffers === true);
            }
        }
        return transferables;
    }
    static unpack(rawMessage, cloneBuffers) {
        const instance = WorkerTaskMessage.createFromExisting(rawMessage, {
            overrideUuid: rawMessage.uuid
        });
        if (rawMessage.payloads) {
            for (const payload of rawMessage.payloads) {
                const handler = PayloadRegister.handler.get(payload.$type);
                instance.addPayload(handler?.unpack(payload, cloneBuffers === true));
            }
        }
        return instance;
    }
    static fromPayload(payloads, cmd) {
        const wtm = WorkerTaskMessage.createNew({
            cmd
        });
        wtm.addPayload(payloads);
        return wtm;
    }
}
//# sourceMappingURL=WorkerTaskMessage.js.map