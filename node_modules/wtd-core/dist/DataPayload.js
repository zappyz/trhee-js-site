import { PayloadRegister } from './Payload.js';
import { fillTransferables } from './utilities.js';
export class DataPayload {
    $type = 'DataPayload';
    message = {
        buffers: new Map(),
        params: {}
    };
    progress = 0;
}
export class DataPayloadHandler {
    pack(payload, transferables, cloneBuffers) {
        const dp = payload;
        if (dp.message.buffers) {
            fillTransferables(dp.message.buffers?.values(), transferables, cloneBuffers);
        }
        return transferables;
    }
    unpack(transportObject, cloneBuffers) {
        const dp = transportObject;
        const dtp = Object.assign(new DataPayload(), transportObject);
        if (dp.message.buffers) {
            for (const [name, buffer] of dp.message.buffers.entries()) {
                if (dtp.message.buffers) {
                    dtp.message.buffers.set(name, cloneBuffers ? buffer.slice(0) : buffer);
                }
            }
        }
        return dtp;
    }
}
// register the default handler
PayloadRegister.handler.set('DataPayload', new DataPayloadHandler());
//# sourceMappingURL=DataPayload.js.map