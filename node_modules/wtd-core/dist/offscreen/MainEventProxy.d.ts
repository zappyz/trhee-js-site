/**
 * Inspired by:
 * https://threejs.org/manual/#en/offscreencanvas
 * https://jsfiddle.net/greggman/kuLdptmq/17/
 */
import { WorkerTask } from '../WorkerTask.js';
import { OffscreenPayload } from './OffscreenPayload.js';
export declare const handlePreventDefault: (event: Event) => void;
export declare const MouseEventProperties: string[];
export declare const handleMouseEvent: (event: Event, workerTask: WorkerTask, properties?: string[]) => void;
export declare const WheelEventProperties: string[];
export declare const handleWheelEvent: (event: Event, workerTask: WorkerTask, properties?: string[]) => void;
export declare const KeydownEventProperties: string[];
export declare const AllowedKeyProperties: string[];
export declare const handleFilteredKeydownEvent: (event: Event, workerTask: WorkerTask, properties?: string[], positiveList?: string[]) => void;
export declare const extractProperties: (event: Event, properties?: string[]) => OffscreenPayload;
export declare const handleTouchEvent: (event: Event, workerTask: WorkerTask) => void;
export type HandlingInstructions = {
    handler: (event: Event, workerTask: WorkerTask, properties?: string[], positiveList?: string[]) => void;
    properties?: string[];
    positiveList?: string[];
    passive?: boolean;
};
export declare const buildDefaultEventHandlingInstructions: () => Map<string, HandlingInstructions>;
export declare const registerCanvas: (workerTask: WorkerTask, canvas: HTMLCanvasElement, handlingInstructions: Map<string, HandlingInstructions>) => Promise<void>;
export declare const sentResize: (workerTask: WorkerTask, canvas: HTMLCanvasElement) => void;
export declare const registerResizeHandler: (workerTask: WorkerTask, canvas: HTMLCanvasElement) => void;
//# sourceMappingURL=MainEventProxy.d.ts.map